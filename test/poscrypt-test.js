var poscrypt = require('../build/Release/poscrypt.node');

var _fillUp = function (value, count, fillWith) {
        var l = count - value.length;
        var ret = "";
        while (--l > -1)
            ret += fillWith;
        return ret + value;
    },
    hexdump = function (buffer, offset, length) {

        offset = offset || 0;
        length = length || buffer.length;

        var out = _fillUp("Offset", 8, " ") + "  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n";
        var row = "";
        for (var i = 0; i < length; i += 16) {
            row += _fillUp(offset.toString(16).toUpperCase(), 8, "0") + "  ";
            var n = Math.min(16, length - offset);
            var string = "";
            for (var j = 0; j < 16; ++j) {
                if (j < n) {
                    var value = buffer.readUInt8(offset);
                    string += value >= 32 ? String.fromCharCode(value) : ".";
                    row += _fillUp(value.toString(16).toUpperCase(), 2, "0") + " ";
                    offset++;
                }
                else {
                    row += "   ";
                    string += " ";
                }
            }
            row += " " + string + "\n";
        }
        out += row;
        return out;
    };

//console.log(poscrypt.hello());


var key = new Buffer([0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30] );


//var data = new Buffer([0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01]);

var data = new Buffer([0x30,0x32,0x30,0x30,0x37,0x30,0x33,0x38,0x30,0x34,0x30,0x30,0x30,0x30,0x43,0x30,0x31,0x30,0x30,0x30,0x31,0x39,0x38,0x37,0x31,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x39,0x37,0x37,0x31,0x30,0x35,0x30,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x30,0x30,0x30,0x30,0x30,0x31,0x32,0x33,0x30,0x30,0x32,0x30,0x30,0x36,0x32,0x38,0x30,0x31,0x33,0x30,0x33,0x31,0x33,0x30,0x33,0x34,0x33,0x37,0x33,0x33,0x33,0x32,0x33,0x31,0x33,0x31,0x33,0x30,0x33,0x34,0x33,0x31,0x33,0x31,0x33,0x30,0x33,0x31,0x33,0x35,0x33,0x34,0x33,0x31,0x33,0x31,0x33,0x34,0x33,0x36,0x33,0x36,0x33,0x30,0x66,0x66,0x37,0x65,0x33,0x34,0x30,0x30,0x33,0x34,0x61,0x37,0x63,0x64,0x39,0x61,0x30,0x30,0x36,0x31,0x32,0x33,0x34,0x35,0x36]);

console.log(hexdump(key));
console.log(hexdump(data));


//var encrypted = poscrypt.encrypt(data, key);
//console.log(hexdump(encrypted));
/*
exports.challenge_response = function () {
    var encrypted = poscrypt.encrypt('browsers', challenge);
	console.log(encrypted);
	console.log('Hello World!'); 
    assert.eql(encrypted, response);
};

*/


var calcmac = poscrypt.calcmac(data, key);

console.log(hexdump(calcmac));
console.log((calcmac));